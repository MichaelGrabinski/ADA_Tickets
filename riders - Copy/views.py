# riders/views.py
from django.shortcuts import render, redirect, get_object_or_404
from django.db.models import Q, Sum
from datetime import date, timedelta

from .models import AdaRiderQ, AdaTicketPurchasesT  # use your existing tables
from .forms import RiderSearchForm  # keep using the simple search form

def home(request):
    form = RiderSearchForm(initial={'by': 'name'})
    return render(request, 'home.html', {'form': form})

def search_riders(request):
    form = RiderSearchForm(request.GET or None)
    riders = []
    if form.is_valid():
        by = form.cleaned_data['by']
        if by == 'name':
            first = (form.cleaned_data.get('first_name') or '').strip()
            last  = (form.cleaned_data.get('last_name') or '').strip()
            q = Q()
            if first:
                q &= Q(fname__icontains=first)
            if last:
                q &= Q(lname__icontains=last)
            riders = AdaRiderQ.objects.filter(q).order_by('lname', 'fname')[:200]
        else:
            ada_id = (form.cleaned_data.get('ada_id') or '').strip()
            riders = AdaRiderQ.objects.filter(adaid__icontains=ada_id).order_by('lname', 'fname')[:200]
    return render(request, 'search_results.html', {'form': form, 'riders': riders})

def rider_detail(request, pk):
    # pk is NEW_ID in AdaRiderQ
    rider = get_object_or_404(AdaRiderQ, pk=pk)

    # We don't have a strict FK to purchases. Commonly we’ll link by known fields:
    # If your purchases table also has adaid, prefer that. If not, match fname/lname.
    # Try adaid first if present:
    ticket_q = Q()
    if rider.adaid:
        ticket_q = Q(fname=rider.fname, lname=rider.lname) | Q(NEW_ID=rider.NEW_ID)
    else:
        ticket_q = Q(fname=rider.fname, lname=rider.lname)

    tickets = AdaTicketPurchasesT.objects.filter(ticket_q).order_by('-purdate')[:50]
    total_amount = AdaTicketPurchasesT.objects.filter(ticket_q).aggregate(total=Sum('puramt'))['total'] or 0
    total_qty = AdaTicketPurchasesT.objects.filter(ticket_q).aggregate(total=Sum('bkqty'))['total'] or 0

    # Render a detail page using fields that exist in your DB
    return render(request, 'rider_detail.html', {
        'rider': rider,
        'tickets': tickets,
        'total': total_amount,
        'total_qty': total_qty,
    })

def rider_create(request):
    # Creating new rows in an unmanaged table is possible, but you may not need it yet.
    # For now, show a simple form to capture the common fields and insert a row with NEW_ID autogenerated strategy if you have one.
    # If NEW_ID is NOT identity/auto, you’ll need to handle key generation or switch to a staging table.
    return render(request, 'rider_edit.html', {'form': None})

def rider_save(request, pk):
    # Stub, since unmanaged tables and existing keys might be read-only for now.
    return redirect('rider_detail', pk=pk)

def rider_inactive(request, pk):
    rider = get_object_or_404(AdaRiderQ, pk=pk)
    # If updates are allowed:
    rider.Inactive = True
    rider.save(update_fields=['Inactive'])
    return redirect('rider_detail', pk=pk)

def finance_transmittal(request):
    start = date.today() - timedelta(days=30)
    aggregates = (AdaTicketPurchasesT.objects
                  .filter(purdate__gte=start)
                  .values('purdate')
                  .annotate(total_amount=Sum('puramt'), total_qty=Sum('bkqty'))
                  .order_by('purdate'))
    return render(request, 'finance_transmittal.html', {'rows': aggregates, 'start': start})


from django.shortcuts import render, redirect, get_object_or_404
from django.utils import timezone
from .models import AdaRiderQ, AdaTicketPurchasesT
from .forms import TicketForm

def ticket_create(request, pk):
    rider = get_object_or_404(AdaRiderQ, pk=pk)

    if request.method == 'POST':
        form = TicketForm(request.POST)
        if form.is_valid():
            t = form.save(commit=False)

            # Link the ticket to this rider.
            # If your ticket table actually has `adaid`, prefer:  t.adaid = rider.adaid
            t.fname = rider.fname
            t.lname = rider.lname

            # Reasonable defaults (optional)
            if not t.purdate:
                t.purdate = timezone.now()

            # Save the row into ADA_Ticket_Purchases_t
            t.save()

            return redirect('rider_detail', pk=rider.pk)
    else:
        # sensible defaults for the form
        initial = {
            'purdate': timezone.now().replace(microsecond=0),
            'bkqty': 1,
            # 'deptenter': request.user.username if you’re using auth
        }
        form = TicketForm(initial=initial)

    return render(request, 'ticket_form.html', {
        'form': form,
        'rider': rider,
    })
